/**
 * Variables
 */
$white: #FFFFFF;
$black: #222222;
$grey: #E5E7EB;
$yellow: #E6CF01;
$red: #CC0000;

/** Brand Colors */
$hwText: #E4E4E4;
$hwText2: #FEFEFE;
$hwTextBg: #232F3B;
$hwTextBg2: #212120;
$hwAccent1: #232F3B;
$hwAccent2: #8CA9BD;
$hwAccent3: #AD8FBF;
$hwAccent4: #BF1919;
$hwAccent5: #BAC944;
$hwAccent6: #E4E4E4;
$hwLink: #C39F87;

/** Table Colors */
$tableBackground: #FFFFFF;
$tableBorder: #DDDDDD;
$tableHead: #222222;
$tableHeadFont: #FFFFFF;
$tableRow: #FFFFFF;
$tableRowAlt: #F3F3F3;
$tableRowFont: #222222;

/** UI Colors */
$error: #CC0000;
$focus: #0912FF;
$placeholder: #F2F2F2;
$success: #008A00;
$warning: #E6CF01;

/** Fonts */
$browser-context: 16;

$headline: var(--font-headline, "Helvetica, Arial, sans-serif");
$headline-alt: var(--font-headline-alt, var(--font-headline, "Helvetica, Arial, sans-serif"));
$headline-spacing: -0.03em;
$headline-line-height: 1;
$body: var(--font-body, "Helvetica, Arial, sans-serif");
$body-alt: var(--font-body-alt, var(--font-body, "Helvetica, Arial, sans-serif"));
$body-spacing: -0.01em;
$body-line-height: 1.35;

/**
* Breakpoints
*/
$bp-xs: 480px;
$bp-sm: 640px;
$bp-md: 768px;
$bp-tb: 769px;
$bp-lg: 1024px;
$bp-dk: 1025px;
$bp-xl: 1280px;
$bp-2xl: 1440px;
$bp-3xl: 1680px;
$bp-4xl: 1920px;

/* Default Easing Equations */
$linear: cubic-bezier(0.25, 0.25, 0.75, 0.75);
$ease: cubic-bezier(0.25, 0.1, 0.25, 1);
$ease-in: cubic-bezier(0.42, 0, 1, 1);
$ease-out: cubic-bezier(0, 0, 0.58, 1);
$ease-in-out: cubic-bezier(0.42, 0, 0.58, 1);

/* Penner Equations (approximated) originally created by @robpenner */
$ease-in-quad: cubic-bezier(0.55, 0.085, 0.68, 0.53);
$ease-in-cubic: cubic-bezier(0.55, 0.055, 0.675, 0.19);
$ease-in-quart: cubic-bezier(0.895, 0.03, 0.685, 0.22);
$ease-in-quint: cubic-bezier(0.755, 0.05, 0.855, 0.06);
$ease-in-sine: cubic-bezier(0.47, 0, 0.745, 0.715);
$ease-in-expo: cubic-bezier(0.95, 0.05, 0.795, 0.035);
$ease-in-circ: cubic-bezier(0.6, 0.04, 0.98, 0.335);
$ease-in-back: cubic-bezier(0.6, -0.28, 0.735, 0.045);

$ease-out-quad: cubic-bezier(0.25, 0.46, 0.45, 0.94);
$ease-out-cubic: cubic-bezier(0.215, 0.61, 0.355, 1);
$ease-out-quart: cubic-bezier(0.165, 0.84, 0.44, 1);
$ease-out-quint: cubic-bezier(0.23, 1, 0.32, 1);
$ease-out-sine: cubic-bezier(0.39, 0.575, 0.565, 1);
$ease-out-expo: cubic-bezier(0.19, 1, 0.22, 1);
$ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);
$ease-out-back: cubic-bezier(0.175, 0.885, 0.32, 1.275);

$ease-in-out-quad: cubic-bezier(0.455, 0.03, 0.515, 0.955);
$ease-in-out-cubic: cubic-bezier(0.645, 0.045, 0.355, 1);
$ease-in-out-quart: cubic-bezier(0.77, 0, 0.175, 1);
$ease-in-out-quint: cubic-bezier(0.86, 0, 0.07, 1);
$ease-in-out-sine: cubic-bezier(0.445, 0.05, 0.55, 0.95);
$ease-in-out-expo: cubic-bezier(1, 0, 0, 1);
$ease-in-out-circ: cubic-bezier(0.785, 0.135, 0.15, 0.86);
$ease-in-out-back: cubic-bezier(0.68, -0.55, 0.265, 1.55);

/**
 * Mixins
 *
 * Breakpoints
 *
 * The approach here is to apply styles mobile first,
 * as true breakpoints
 */
@mixin screen-min-xs {
	@media screen and (min-width: $bp-xs) {
		@content;
	}
}

@mixin screen-min-sm {
	@media screen and (min-width: $bp-sm) {
		@content;
	}
}

@mixin screen-min-md {
	@media screen and (min-width: $bp-md) {
		@content;
	}
}

@mixin screen-min-tb {
	@media screen and (min-width: $bp-dk) {
		@content;
	}
}

@mixin screen-min-lg {
	@media screen and (min-width: $bp-lg) {
		@content;
	}
}

@mixin screen-min-dk {
	@media screen and (min-width: $bp-dk) {
		@content;
	}
}

@mixin screen-min-xl {
	@media screen and (min-width: $bp-xl) {
		@content;
	}
}

@mixin screen-min-2xl {
	@media screen and (min-width: $bp-2xl) {
		@content;
	}
}

@mixin screen-min-3xl {
	@media screen and (min-width: $bp-3xl) {
		@content;
	}
}

@mixin screen-min-4xl {
	@media screen and (min-width: $bp-4xl) {
		@content;
	}
}

/**
 * Broad Media Queries
 */
@mixin desktop {
	@media screen and (min-width: $bp-dk) {
		@content;
	}
}

@mixin tablet {
	@media screen and (min-width: $bp-tb) {
		@content;
	}
}

@mixin mobile {
	@media screen and (max-width: $bp-md) {
		@content;
	}
}

/**
 * Sizing
 *  - usage: @mixin size(100%, auto);
 */
@mixin size($width, $height: $width) {
	width: $width;
	height: $height;
}

/** Convert font pixels to em for font-sizing % */
@function em($pixels, $context: $browser-context) {

	@if (unitless($pixels)) {
		$pixels: $pixels * 1px;
	}

	@if (unitless($context)) {
		$context: $context * 1px;
	}

	@return calc($pixels / $context * 1em);
}

/** Convert font pixels to rem for absolute font-sizing */
@function rem($pixels, $context: $browser-context) {

	@if (unitless($pixels)) {
		$pixels: $pixels * 1px;
	}

	@if (unitless($context)) {
		$context: $context * 1px;
	}

	@return calc($pixels / $context * 1rem);
}